{"version":3,"names":[],"mappings":"","sources":["build.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n// Get image\nvar getImage = function getImage() {\n    getClosestWidth.call(this);\n    displayImage.call(this);\n};\n\n// Get the closest width based on the steps available\nvar getClosestWidth = function getClosestWidth() {\n\n    // Check how many steps away we are\n    var stepsOnTheWay = this.element.offsetWidth / this.options.steps;\n\n    // Round up\n    stepsOnTheWay = Math.ceil(stepsOnTheWay);\n\n    // Calculate ratio to height\n    var heightRatio = this.height / this.width;\n\n    var newWidth = Math.round(this.options.steps * stepsOnTheWay);\n    var newHeight = Math.round(newWidth * heightRatio);\n\n    if (newWidth > this.currentWidth) {\n        this.currentWidth = newWidth;\n        this.currentHeight = newHeight;\n    }\n};\n\n// Set the src attribute\nvar displayImage = function displayImage() {\n    var newUrl = createImageUrl.call(this);\n    this.element.setAttribute('src', newUrl);\n};\n\n// Create image url in Croppa format\nvar createImageUrl = function createImageUrl() {\n    var regex = /^(.+)(\\.[a-z]+)$/i;\n    var self = this;\n    var replacer = function replacer(string, p1, p2) {\n\n        var width = self.currentWidth ? self.currentWidth : '_';\n        var height = self.currentHeight ? self.currentHeight : '_';\n\n        var suffix = '-';\n        var size = width + 'x' + height;\n\n        var resize = self.resize ? '-resize' : '';\n\n        return p1 + suffix + size + resize + p2;\n    };\n    return this.url.replace(regex, replacer);\n};\n\n// Set events\nvar setEvents = function setEvents() {\n\n    var self = this;\n    var onEvent = function onEvent() {\n        getImage.call(self);\n    };\n\n    window.addEventListener('resize', onEvent);\n\n    // $(window).on('resize.fittext orientationchange.fittext', resizer);\n};\n\n// Utility method to extend defaults with user options\nfunction extendDefaults(source, properties) {\n    var property;\n    for (property in properties) {\n        if (properties.hasOwnProperty(property)) {\n            source[property] = properties[property];\n        }\n    }\n    return source;\n};\n\nmodule.exports = function (element) {\n\n    // Setup options\n    var defaults = {\n        'srcAttribute': 'size-src',\n        'keyAttribute': 'key',\n        'resizeAttribute': 'resize',\n        'steps': 200\n    };\n\n    // Create options by extending defaults with the passed in arugments\n    if (arguments[1] && _typeof(arguments[1]) === \"object\") {\n        this.options = extendDefaults(defaults, arguments[1]);\n    }\n\n    // Set variables\n    this.element = element;\n    this.url = this.element.getAttribute(this.options.srcAttribute);\n    this.width = parseInt(element.getAttribute('width'));\n    this.height = parseInt(element.getAttribute('height'));\n\n    this.resize = element.getAttribute(this.options.resizeAttribute);\n    this.resize = this.resize == 'true' ? true : false;\n\n    // The current width\n    this.currentWidth = null;\n    this.currentHeight = null;\n\n    // Call functions\n    getImage.call(this);\n\n    // Set the events\n    setEvents.call(this);\n\n    return this;\n};\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar imageObject = document.querySelector('img');\nconsole.log(imageObject);\nvar ImageSize = require('./ImageSize');\nconsole.log(ImageSize);\n\nvar imageSize = new ImageSize(imageObject, {\n    width: 400,\n    height: 400,\n    resize: true,\n    steps: 50\n});\n\n},{\"./ImageSize\":1}]},{},[2]);\n"],"file":"build.js","sourceRoot":"/source/"}